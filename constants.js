exports.CONSENSUS = {
  RAFT: 'raft',
  ISTANBUL: 'istanbul'
}

exports.NODE_ROLE = {
  COORDINATOR: 'coordinator',
  NONCOORDINATOR: 'non-coordinator',
  DYNAMIC_PEER: 'dynamicPeer'
}

const FOLDER_BLOCKCHAIN = 'blockchain';
const FOLDER_GETH = 'geth';
const FOLDER_KEYSTORE = 'keystore';
const FOLDER_NODEKEY = 'nodekey';

exports.FOLDER_BLOCKCHAIN = FOLDER_BLOCKCHAIN;
exports.FOLDER_KEYSTORE = FOLDER_KEYSTORE;
exports.FOLDER_NODEKEY = FOLDER_NODEKEY;
exports.FOLDER_BLOCKCHAIN_GETH = `${FOLDER_BLOCKCHAIN}/${FOLDER_GETH}`;
exports.FOLDER_BLOCKCHAIN_KEYSTORE = `${FOLDER_BLOCKCHAIN}/${FOLDER_KEYSTORE}`;
exports.FILE_BLOCKCHAIN_NODEKEY = `${FOLDER_BLOCKCHAIN}/${FOLDER_GETH}/${FOLDER_NODEKEY}`;
exports.FILE_BLOCKCHAIN_IBFTVALIDATORADDRESS = `${FOLDER_BLOCKCHAIN}/validatorAddress`;
exports.FILE_BLOCKCHAIN_STATICNODES = `${FOLDER_BLOCKCHAIN}/static-nodes.json`;
exports.FILE_BLOCKCHAIN_GETHIPC = `${FOLDER_BLOCKCHAIN}/geth.ipc`;
exports.FILE_GENESIS_QUORUM = 'quorum-genesis.json';

exports.BLOCKCHAINPROVIDER_RPC_LOCALHOST = 'http://localhost:';
exports.BLOCKCHAINPROVIDER_WS_LOCALHOST = 'ws://localhost:';

exports.SCRIPT_BLOCKCHAIN_STARTRAFTNODE = 'start-raft-node.sh';
exports.SCRIPT_BLOCKCHAIN_STARTISTANBULNODE = 'start-istanbul-node.sh';

exports.FOLDER_CONSTELLATION = 'constellation';
exports.CONSTELLATION_FILE_PUBKEY = 'node.pub';
exports.CONSTELLATION_FILE_PRIVKEY = 'node.key';
exports.CONSTELLATION_FILE_ARCHPUBKEY = 'nodeArch.pub';
exports.CONSTELLATION_FILE_ARCHPRIVKEY = 'nodeArch.key';
exports.CONSTELLATION_HELPURL = 'https://github.com/ConsenSys/QuorumNetworkManager#upgrading-constellation';

exports.STDOUT_CONSTELLATIONGENKEY_LOCKKEYPAIR = 'Lock key pair';
exports.STDOUT_CONSTELLATIONVERSION_010 = 'Constellation Node 0.1.0';

const FOLDER_COMMUNICATION = 'communication';
const FOLDER_WHISPERNODE = 'communication_node';

exports.FOLDER_WHISPERNODE = FOLDER_WHISPERNODE;
exports.FOLDER_WHISPER_GETH = `${FOLDER_WHISPERNODE}/${FOLDER_GETH}`;
exports.FILE_WHISPER_COMMNODEKEY = `${FOLDER_WHISPERNODE}/${FOLDER_GETH}/nodekey`;
exports.FILE_WHISPER_GETHIPC = `${FOLDER_WHISPERNODE}/geth.ipc`;
exports.WHISPERPROVIDER_RPC_LOCALHOST = 'http://localhost:';
exports.WHISPERPROVIDER_WS_LOCALHOST = 'ws://localhost:';

exports.SCRIPT_WHISPER_STARTCOMMNODE = 'start-communication-node.sh';

exports.WHISPER_TOPIC_NETWORKMEMBERSHIP = 'NetworkMembership';
exports.WHISPER_TOPIC_GENESISCONFIG = 'GenesisConfig';
exports.WHISPER_TOPIC_STATICNODES = 'StaticNodes';
exports.WHISPER_TOPIC_ENODE = 'Enode';
exports.WHISPER_TOPIC_ETHER = 'Ether';
exports.WHISPER_TOPIC_NODEINFO = 'NodeInfo';

exports.FILE_WHISPER_DEFAULTCOMMNODEKEY = `${FOLDER_COMMUNICATION}/communication_node_key`;
exports.FILE_WHISPER_NODEINFO = 'network_nodes_info.json';

const WHISPER_REQUEST = 'request';
const WHISPER_REQUEST_DELIMITER = '|';

exports.WHISPER_REQUEST_EXISTINGRAFTMEMBERSHIP = `${WHISPER_REQUEST}${WHISPER_REQUEST_DELIMITER}existingRaftNetworkMembership`
exports.WHISPER_REQUEST_NETWORKMEMBERSHIP = `${WHISPER_REQUEST}${WHISPER_REQUEST_DELIMITER}networkMembership`;

exports.WHISPER_REQUEST_EXISTINGISTANBULMEMBERSHIP = `${WHISPER_REQUEST}${WHISPER_REQUEST_DELIMITER}existingIstanbulNetworkMembership`

const WHISPER_RESPONSE = 'response';
const WHISPER_RESPONSE_DELIMITER = '|';
const WHISPER_RESPONSE_NETWORKMEMBERSHIP = 'networkMembership';
const WHISPER_RESPONSE_EXISTINGRAFTMEMBERSHIP = 'existingRaftNetworkMembership' 
exports.WHISPER_RESPONSE_EXISTINGRAFTMEMBERSHIP_ACCEPTED = `${WHISPER_RESPONSE}${WHISPER_RESPONSE_DELIMITER}${WHISPER_RESPONSE_EXISTINGRAFTMEMBERSHIP}${WHISPER_RESPONSE_DELIMITER}ACCEPTED`
exports.WHISPER_RESPONSE_NETWORKMEMBERSHIP_ACCEPTED = `${WHISPER_RESPONSE}${WHISPER_RESPONSE_DELIMITER}${WHISPER_RESPONSE_NETWORKMEMBERSHIP}${WHISPER_RESPONSE_DELIMITER}ACCEPTED`

const WHISPER_RESPONSE_EXISTINGISTANBULMEMBERSHIP = 'existingRaftNetworkMembership'
exports.WHISPER_RESPONSE_EXISTINGISTANBULMEMBERSHIP_ACCEPTED = `${WHISPER_RESPONSE}${WHISPER_RESPONSE_DELIMITER}${WHISPER_RESPONSE_EXISTINGISTANBULMEMBERSHIP}${WHISPER_RESPONSE_DELIMITER}ACCEPTED`

exports.EVENT_PEERHANDLER_NEWENODE = 'newEnode';

exports.STDOUT_NEWGETHACCOUNT_YOURNEWACCOUNT = 'Your new account';
exports.STDOUT_NEWGETHACCOUNT_REPEAT = 'Repeat';
exports.STDOUT_NEWGETHACCOUNT_ADDRESS = 'Address';
exports.STDERR_NEWGETHACCOUNT_NODEFAULTACC = 'No etherbase set and no accounts found as default';

exports.NETWORKMEMBERSHIP= {
  ALLOWALL: 'allowAll',
  PERMISSIONEDNODES: 'permissionedNodes',
  ALLOW_ONLY_PREAUTH: 'allowOnlyPreAuth'
} 

exports.ISTANBUL_SETUP_OUTPUT = {
  VALIDATORS: 'validators',
  STATICNODES: 'static-nodes.json',
  GENESISJSON: 'genesis.json'
}

exports.ISTANBUL_SETUP_OUTPUT_VALIDATORS = {
  ADDRESS: 'Address',
  NODEINFO: 'NodeInfo',
  NODEKEY: 'Nodekey'
}

exports.ISTANBUL_SETUP_OUTPUT_GENESIS = {
  CONFIG: 'config'
}